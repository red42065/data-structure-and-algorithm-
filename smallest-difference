# smallest difference timecomplexity is O(nlogn + mlogm) where n is number of elements in array one and m in number of elements in array two, space complexity O(1)

def smallestDifference(arrayOne, arrayTwo):
    # Write your code here.
    arrayOne.sort()
    arrayTwo.sort()
    min = float('inf')
    current = float('inf')
    pointer_1 = 0
    pointer_2 = 0
    smallestpair = []
    
    while pointer_1<len(arrayOne) and pointer_2<len(arrayTwo):
        if arrayOne[pointer_1]>arrayTwo[pointer_2]:
            current = abs(arrayOne[pointer_1]-arrayTwo[pointer_2])
            pointer_2+=1
        elif arrayOne[pointer_1]<arrayTwo[pointer_2]:
            current = abs(arrayOne[pointer_1]-arrayTwo[pointer_2])
            pointer_1+=1
        else:
            return [arrayOne[pointer_1],arrayTwo[pointer_2]]

        if current < min:
            min = current
            smallestpair = [arrayOne[pointer_1],arrayTwo[pointer_2]]
        
    return min
        
x = smallestDifference([-1, 5, 10, 20, 28, 3], [26, 134, 135, 15, 17])
print(x)


# brute force method with time complexity O(nm) and space complexity O(1)

def smallestDifference(arrayOne, arrayTwo):
    # Write your code here.
    # edge case
    if len(arrayOne)<2 and len(arrayTwo)<2:
        return [arrayOne[0],arrayTwo[0]]
    min = float('inf')
    min_list = []
    for i in range(len(arrayOne)):
        for j in range(len(arrayTwo)):
            if min > abs(arrayOne[i]-arrayTwo[j]):
                min = abs(arrayOne[i]-arrayTwo[j])
                min_list.append([arrayOne[i],arrayTwo[j]])
    for i in range(len(min_list)):
        if min == abs(min_list[i][0]-min_list[i][1]):
            return min_list[i]  
